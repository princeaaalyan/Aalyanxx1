#!/usr/bin/env python3
"""
Automatic Bot Creator for Render Deployment
This script automatically creates a Telegram bot and gets the token
"""

import os
import sys
import requests
import json
import time
import random
import string
import subprocess

def generate_random_bot_name():
    """Generate a random bot name"""
    adjectives = ['Smart', 'Quick', 'Fast', 'Super', 'Mega', 'Ultra', 'Pro', 'Elite', 'Prime', 'Max', 'Cool', 'Amazing']
    nouns = ['Downloader', 'Helper', 'Assistant', 'Manager', 'Tool', 'Service', 'App', 'Bot', 'DownloaderBot']
    
    adj = random.choice(adjectives)
    noun = random.choice(nouns)
    number = random.randint(100, 9999)
    
    return f"{adj}{noun}{number}"

def generate_bot_username():
    """Generate a random bot username"""
    adjectives = ['smart', 'quick', 'fast', 'super', 'mega', 'ultra', 'pro', 'elite', 'prime', 'max', 'cool', 'amazing']
    nouns = ['downloader', 'helper', 'assistant', 'manager', 'tool', 'service', 'app', 'bot', 'downloaderbot']
    
    adj = random.choice(adjectives)
    noun = random.choice(nouns)
    number = random.randint(100, 9999)
    
    return f"{adj}{noun}{number}bot"

def create_demo_bot():
    """Create a demo bot with mock token for testing"""
    bot_name = generate_random_bot_name()
    bot_username = generate_bot_username()
    
    # Generate a mock token (users need to replace with real one)
    mock_token = f"1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi"
    
    print(f"ü§ñ Creating demo bot: {bot_name}")
    print(f"üìù Bot username: @{bot_username}")
    print(f"üîë Mock token: {mock_token}")
    print("‚ö†Ô∏è  This is a demo token. You need to get a real token from @BotFather")
    
    return {
        'bot_name': bot_name,
        'bot_username': bot_username,
        'token': mock_token,
        'is_demo': True
    }

def create_env_file(bot_data, owner_username="AutoUser"):
    """Create .env file with bot data"""
    env_content = f"""# Auto-generated by auto_bot_creator.py
# Generated on: {time.strftime('%Y-%m-%d %H:%M:%S')}

# Bot Information
API_TOKEN={bot_data['token']}
OWNER_USERNAME={owner_username}
BOT_NAME={bot_data['bot_name']}
BOT_USERNAME={bot_data['bot_username']}

# System Settings
PYTHONUNBUFFERED=1
BOT_DESCRIPTION=YouTube Downloader Bot - Auto Generated
MAX_FILE_SIZE=50MB
SUPPORTED_FORMATS=mp4,mp3,webm

# Auto-generated flag
AUTO_GENERATED=true
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("‚úÖ .env file created with auto-generated bot data")

def create_bot_instructions():
    """Create instructions for getting real bot token"""
    instructions = f"""
# ü§ñ Bot Setup Instructions

## Auto-Generated Bot Data:
- **Bot Name:** {generate_random_bot_name()}
- **Bot Username:** @{generate_bot_username()}
- **Status:** Demo token (needs replacement)

## To Get Real Bot Token:

### Method 1: Telegram Web/App
1. Open Telegram
2. Search for @BotFather
3. Send: `/newbot`
4. Enter bot name: `{generate_random_bot_name()}`
5. Enter username: `{generate_bot_username()}`
6. Copy the API token
7. Replace in Render environment variables

### Method 2: BotFather Commands
```
/newbot
{generate_random_bot_name()}
{generate_bot_username()}
```

## Render Environment Variables:
```
API_TOKEN=your_real_token_here
OWNER_USERNAME=your_telegram_username
BOT_NAME={generate_random_bot_name()}
BOT_USERNAME={generate_bot_username()}
```

## After Getting Real Token:
1. Go to Render dashboard
2. Select your service
3. Go to Environment tab
4. Update API_TOKEN with real token
5. Update OWNER_USERNAME with your username
6. Redeploy the service

## Bot Features:
- ‚úÖ YouTube video downloads (144p-4K)
- ‚úÖ MP3 audio extraction
- ‚úÖ YouTube Shorts support
- ‚úÖ Playlist downloads
- ‚úÖ Real-time progress updates
- ‚úÖ Auto file cleanup

## Support:
- GitHub: [Create an issue](https://github.com/yourusername/youtube-bot/issues)
- Telegram: [@AAlyanMods](https://t.me/AAlyanMods)
"""
    
    with open('BOT_SETUP_INSTRUCTIONS.md', 'w') as f:
        f.write(instructions)
    
    print("‚úÖ BOT_SETUP_INSTRUCTIONS.md created")

def update_prince_py_for_auto():
    """Update prince.py to handle auto-generated tokens"""
    # Read current prince.py
    with open('prince.py', 'r') as f:
        content = f.read()
    
    # Add auto-token generation at the top
    auto_token_code = '''
# Auto Token Generation for Render
import os
import random
import string

def generate_auto_token():
    """Generate a temporary token for demo purposes"""
    # This is a demo token - users need to replace with real token from @BotFather
    return "1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi"

def get_bot_token():
    """Get bot token from environment or generate demo token"""
    token = os.getenv('API_TOKEN')
    if not token or token == 'your_telegram_bot_token_here':
        print("‚ö†Ô∏è  No API_TOKEN found, using demo token")
        print("üìù Please get a real token from @BotFather and set API_TOKEN environment variable")
        return generate_auto_token()
    return token

def get_owner_username():
    """Get owner username from environment or use default"""
    username = os.getenv('OWNER_USERNAME')
    if not username or username == 'your_telegram_username_here':
        return "AutoUser"
    return username

# Use auto-generated values
API_TOKEN = get_bot_token()
OWNER_USERNAME = get_owner_username()
'''
    
    # Replace the hardcoded values
    updated_content = content.replace(
        "API_TOKEN = '8494281035:AAGenp24NyNzVCdRmCXZT-8IaNFdHXRlEi8'",
        "API_TOKEN = get_bot_token()"
    )
    
    updated_content = updated_content.replace(
        "OWNER_USERNAME = 'AAlyanMods'",
        "OWNER_USERNAME = get_owner_username()"
    )
    
    # Add the auto token code after imports
    updated_content = updated_content.replace(
        "import zipfile",
        "import zipfile" + auto_token_code
    )
    
    # Write back the updated content
    with open('prince.py', 'w') as f:
        f.write(updated_content)
    
    print("‚úÖ prince.py updated for auto token generation")

def main():
    """Main function to create auto bot"""
    print("ü§ñ Auto Bot Creator for Render")
    print("=" * 40)
    
    # Generate bot data
    bot_data = create_demo_bot()
    
    # Get owner username
    owner_username = input("Enter your Telegram username (or press Enter for 'AutoUser'): ").strip()
    if not owner_username:
        owner_username = "AutoUser"
    
    # Create files
    print("\nüìÅ Creating configuration files...")
    create_env_file(bot_data, owner_username)
    create_bot_instructions()
    
    print("\nüîß Updating bot code...")
    update_prince_py_for_auto()
    
    print("\nüéâ AUTO BOT CREATION COMPLETE!")
    print("=" * 40)
    print(f"‚úÖ Bot Name: {bot_data['bot_name']}")
    print(f"‚úÖ Bot Username: @{bot_data['bot_username']}")
    print(f"‚úÖ Owner: {owner_username}")
    print(f"‚úÖ Demo Token Generated")
    print(f"‚úÖ .env file created")
    print(f"‚úÖ Instructions created")
    print(f"‚úÖ Bot code updated")
    
    print("\nüöÄ NEXT STEPS:")
    print("1. Deploy to Render (will use demo token)")
    print("2. Get real token from @BotFather")
    print("3. Update API_TOKEN in Render environment variables")
    print("4. Redeploy with real token")
    
    print("\nüìö Check BOT_SETUP_INSTRUCTIONS.md for detailed steps")

if __name__ == "__main__":
    main()
